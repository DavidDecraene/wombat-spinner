{"version":3,"sources":["ng://wombat-spinner/lib/spinner-overlay.component.ts","ng://wombat-spinner/lib/spinner.directive.ts","ng://wombat-spinner/lib/spinner.module.ts"],"names":["SpinnerOverlayComponent","this","loading","spinClass","icon","Object","defineProperty","prototype","_bodyTemplate","tmpl","bodyTemplate","ngOnInit","Component","args","selector","template","Input","HostBinding","type","ContentChild","TemplateRef","static","SpinnerDirective","templateRef","viewContainerRef","resolver","_loading","state","undefined","component","_options","opts","syncOptions","options","spinIcon","factory","resolveComponentFactory","componentRef","createComponent","instance","bodyInput","Directive","ViewContainerRef","ComponentFactoryResolver","SpinnerModule","NgModule","imports","CommonModule","providers","declarations","exports","entryComponents"],"mappings":"+UAAA,IAAAA,EAAA,WA2CE,SAAAA,IAjCAC,KAAAC,SAAU,EAIVD,KAAAE,UAAY,GAGZF,KAAAG,KAAO,oCA+BT,OA3BEC,OAAAC,eAAIN,EAAAO,UAAA,eAAY,KAAhB,WACE,OAAON,KAAKO,mBAGd,SAAiBC,GACfR,KAAKO,cAAgBC,mCAGvBJ,OAAAC,eACIN,EAAAO,UAAA,YAAS,KADb,SACcE,GACRA,IACFR,KAAKS,aAAeD,oCAIxBJ,OAAAC,eACIN,EAAAO,UAAA,cAAW,KADf,SACgBE,GACVA,IACFR,KAAKS,aAAeD,oCAMxBT,EAAAO,UAAAI,SAAA,iCA3CDC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAA,6jBAKCC,EAAAA,yBAGAC,EAAAA,YAAWJ,KAAA,CAAC,UAAO,CAAAK,KACnBF,EAAAA,oBAGAA,EAAAA,yBAaAA,EAAAA,MAAKH,KAAA,CAAC,6BAONM,EAAAA,aAAYN,KAAA,CAACO,EAAAA,YAAa,CAAEC,UAAQ,OAYvCrB,EAhDA,GCAAsB,EAAA,WAwCE,SAAAA,EAAoBC,EACVC,EACAC,GAFUxB,KAAAsB,YAAAA,EACVtB,KAAAuB,iBAAAA,EACAvB,KAAAwB,SAAAA,EA9BVxB,KAAAyB,UAAW,EAoDb,OA9CErB,OAAAC,eAAIgB,EAAAf,UAAA,UAAO,KAAX,WACE,OAAON,KAAKyB,cAcd,SACYC,GACNA,IAAUC,YACd3B,KAAKyB,SAAWC,EACZ1B,KAAK4B,YAAa5B,KAAK4B,UAAU3B,QAAUyB,qCAdjDtB,OAAAC,eACIgB,EAAAf,UAAA,UAAO,KAKX,WACE,OAAON,KAAK6B,cAPd,SACYC,GACV9B,KAAK6B,SAAWC,EAChB9B,KAAK+B,+CAmBPV,EAAAf,UAAAyB,YAAA,WACO/B,KAAK4B,WACL5B,KAAKgC,UACNhC,KAAKgC,QAAQ9B,YACfF,KAAK4B,UAAU1B,UAAYF,KAAKgC,QAAQ9B,WAEtCF,KAAKgC,QAAQC,WACfjC,KAAK4B,UAAUzB,KAAOH,KAAKgC,QAAQC,YAIvCZ,EAAAf,UAAAI,SAAA,eACQwB,EAAUlC,KAAKwB,SAASW,wBAAwBpC,GAChDqC,EAAepC,KAAKuB,iBAAiBc,gBAAgBH,GAC3DE,EAAaE,SAASrC,QAAUD,KAAKC,QACrCmC,EAAaE,SAASC,UAAYvC,KAAKsB,YACvCtB,KAAK4B,UAAYQ,EAAaE,SAC9BtC,KAAK+B,mCAtDRS,EAAAA,UAAS5B,KAAA,CAAC,CACTC,SAAU,0DATeM,EAAAA,mBAAqBsB,EAAAA,wBAAkBC,EAAAA,6DAuB/D3B,EAAAA,MAAKH,KAAA,CAAC,oCAUNG,EAAAA,MAAKH,KAAA,CAAC,eA+BTS,EAhEA,GCMAsB,EAAA,WAgBI,SAAAA,KAEJ,2BAlBCC,EAAAA,SAAQhC,KAAA,CAAC,CACNiC,QAAS,CACPC,EAAAA,cAEFC,UAAW,GAEXC,aAAc,CACZjD,EAAyBsB,GAE3B4B,QAAS,CACPlD,EAAyBsB,GACxB6B,gBAAiB,CAClBnD,6CAMN4C,EAlBA","sourcesContent":["import { Component, HostBinding, OnInit, Input, TemplateRef, ContentChild } from '@angular/core';\n\n@Component({\n  selector: 'w-spinner-overlay',\n  templateUrl: './spinner-overlay.component.html',\n  styleUrls: ['./spinner-overlay.component.scss']\n})\nexport class SpinnerOverlayComponent implements OnInit {\n\n  @Input()\n  loading = true;\n\n  @HostBinding('class')\n  @Input()\n  spinClass = '';\n\n  @Input()\n  icon = 'fas fa-circle-notch fa-spin fa-5x';\n\n  _bodyTemplate: TemplateRef<any>;\n\n  get bodyTemplate(): TemplateRef<any> {\n    return this._bodyTemplate;\n  }\n\n  set bodyTemplate(tmpl: TemplateRef<any>) {\n    this._bodyTemplate = tmpl;\n  }\n\n  @Input('body')\n  set bodyInput(tmpl: TemplateRef<any>) {\n    if (tmpl) {\n      this.bodyTemplate = tmpl;\n    }\n  }\n\n  @ContentChild(TemplateRef, { static: false })\n  set bodyContent(tmpl: TemplateRef<any>) {\n    if (tmpl) {\n      this.bodyTemplate = tmpl;\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, Input, TemplateRef, OnInit, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\nimport { SpinnerOverlayComponent } from './spinner-overlay.component';\n\nexport interface SpinOptions {\n  spinIcon?: string;\n  spinClass?: string;\n}\n\n@Directive({\n  selector: '[wSpinner]'\n})\nexport class SpinnerDirective implements OnInit {\n  _loading = true;\n  _spClass: string;\n  _spIcon: string;\n  _options: SpinOptions;\n  component: SpinnerOverlayComponent;\n\n  get loading(): boolean {\n    return this._loading;\n  }\n\n\n  @Input('wSpinnerOptions')\n  set options(opts: SpinOptions) {\n    this._options = opts;\n    this.syncOptions();\n  }\n\n  get options(): SpinOptions {\n    return this._options;\n  }\n\n  @Input('wSpinner')\n  set loading(state: boolean) {\n    if (state === undefined) { return; }\n    this._loading = state;\n    if (this.component) { this.component.loading = state; }\n  }\n\n  constructor(private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private resolver: ComponentFactoryResolver) {\n  }\n\n  syncOptions() {\n    if (!this.component) { return; }\n    if (!this.options) { return; }\n    if (this.options.spinClass) {\n      this.component.spinClass = this.options.spinClass;\n    }\n    if (this.options.spinIcon) {\n      this.component.icon = this.options.spinIcon;\n    }\n  }\n\n  ngOnInit() {\n    const factory = this.resolver.resolveComponentFactory(SpinnerOverlayComponent);\n    const componentRef = this.viewContainerRef.createComponent(factory);\n    componentRef.instance.loading = this.loading;\n    componentRef.instance.bodyInput = this.templateRef;\n    this.component = componentRef.instance;\n    this.syncOptions();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SpinnerOverlayComponent } from './spinner-overlay.component';\nimport { SpinnerDirective } from './spinner.directive';\nimport { CommonModule } from '@angular/common';\n\n// CommonModule to enable ngIf\n@NgModule({\n    imports: [\n      CommonModule\n    ],\n    providers: [\n    ],\n    declarations: [\n      SpinnerOverlayComponent, SpinnerDirective\n    ],\n    exports: [\n      SpinnerOverlayComponent, SpinnerDirective\n    ], entryComponents: [\n      SpinnerOverlayComponent\n    ]\n})\nexport class SpinnerModule {\n    constructor() {\n    }\n}\n"]}